# Generated by Django 3.0.5 on 2020-04-29 13:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import modules.core.blocks.mixins
import modules.core.blocks.stream
import taggit.managers
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.core.models
import wagtail.documents.blocks
import wagtail.images.blocks
import wagtail.images.models
import wagtail.search.index
import wagtailcache.cache


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('wagtailcore', '0045_assign_unlock_grouppagepermission'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, null=True, verbose_name='Name')),
                ('email_address', models.EmailField(max_length=255, null=True, verbose_name='Email address')),
                ('message', models.TextField(null=True, verbose_name='Your message')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date submitted')),
            ],
        ),
        migrations.CreateModel(
            name='FooterNavigationMenu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'verbose_name': 'Footer navigation menu',
            },
        ),
        migrations.CreateModel(
            name='PrimaryNavigationMenu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'verbose_name': 'Primary navigation menu',
            },
        ),
        migrations.CreateModel(
            name='PrimaryNavItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('text', models.CharField(blank=True, help_text='Link text', max_length=32, null=True)),
                ('link_url', models.CharField(blank=True, help_text='Link to an external URL', max_length=255, null=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiteImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('file', models.ImageField(height_field='height', upload_to=wagtail.images.models.get_upload_to, verbose_name='file', width_field='width')),
                ('width', models.IntegerField(editable=False, verbose_name='width')),
                ('height', models.IntegerField(editable=False, verbose_name='height')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('focal_point_x', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_y', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_width', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_height', models.PositiveIntegerField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(editable=False, null=True)),
                ('file_hash', models.CharField(blank=True, editable=False, max_length=40)),
                ('collection', models.ForeignKey(default=wagtail.core.models.get_root_collection_id, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.Collection', verbose_name='collection')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
                ('uploaded_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploaded by user')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='SocialMediaSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook', models.URLField(blank=True, help_text='Your Facebook page URL', null=True)),
                ('twitter', models.URLField(blank=True, help_text='Full URL of Twitter profile', max_length=255, null=True)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'verbose_name': 'Social media accounts',
            },
        ),
        migrations.CreateModel(
            name='SiteDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('file', models.FileField(upload_to='documents', verbose_name='file')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('file_size', models.PositiveIntegerField(editable=False, null=True)),
                ('file_hash', models.CharField(blank=True, editable=False, max_length=40)),
                ('collection', models.ForeignKey(default=wagtail.core.models.get_root_collection_id, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.Collection', verbose_name='collection')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
                ('uploaded_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploaded by user')),
            ],
            options={
                'verbose_name': 'document',
                'verbose_name_plural': 'documents',
                'abstract': False,
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='PrimaryNavSubItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('text', models.CharField(blank=True, help_text='Link text', max_length=32, null=True)),
                ('link_url', models.CharField(blank=True, help_text='Link to an external URL', max_length=255, null=True)),
                ('link_document', models.ForeignKey(blank=True, help_text='Link to a document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.SiteDocument')),
                ('link_page', models.ForeignKey(blank=True, help_text='Link to a page', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page')),
                ('parent', modelcluster.fields.ParentalKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.PrimaryNavItem')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='primarynavitem',
            name='link_document',
            field=models.ForeignKey(blank=True, help_text='Link to a document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.SiteDocument'),
        ),
        migrations.AddField(
            model_name='primarynavitem',
            name='link_page',
            field=models.ForeignKey(blank=True, help_text='Link to a page', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page'),
        ),
        migrations.AddField(
            model_name='primarynavitem',
            name='nav_menu',
            field=modelcluster.fields.ParentalKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nav_items', to='core.PrimaryNavigationMenu'),
        ),
        migrations.CreateModel(
            name='MetaTagSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, help_text='The short description shown in search results (160 characters max)', null=True)),
                ('image', models.ForeignKey(blank=True, help_text='A default image to use when shared on Facebook (aim for 1200x630)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.SiteImage')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'verbose_name': 'Meta and social sharing tags',
            },
        ),
        migrations.CreateModel(
            name='LandingPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('hero_headline', models.CharField(blank=True, max_length=255, null=True, verbose_name='Headline')),
                ('hero_body', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Body text')),
                ('blurb', models.TextField(blank=True, null=True)),
                ('display_date', models.DateField(blank=True, help_text='If blank, this will be set to the date the page was first published', null=True)),
                ('body', wagtail.core.fields.StreamField([('stats', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(help_text='Title text', required=False)), ('body', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'underline', 'ol', 'ul', 'small', 'link', 'document-link'], help_text='Body text', required=False)), ('background_image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text_align', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'Left'), ('centred', 'Center'), ('right', 'Right')], label='Align', required=False)), ('objects', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('stat_text', wagtail.core.blocks.CharBlock(help_text='Text version of this stat', required=True)), ('stat_image', wagtail.images.blocks.ImageChooserBlock(help_text='Image version of this stat', required=False)), ('description', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('cta', wagtail.core.blocks.StreamBlock([('page', wagtail.core.blocks.StructBlock([('link_page', wagtail.core.blocks.PageChooserBlock(label='Linked Page', required=True)), ('link_label', modules.core.blocks.mixins.LinkLabelBlock(help_text='If blank, will use page title'))], required=False)), ('document', wagtail.core.blocks.StructBlock([('link_document', wagtail.documents.blocks.DocumentChooserBlock(label='Linked Document', required=True)), ('link_label', modules.core.blocks.mixins.LinkLabelBlock())], required=False)), ('url', wagtail.core.blocks.StructBlock([('link_url', wagtail.core.blocks.CharBlock(label='URL', required=True)), ('link_label', modules.core.blocks.mixins.LinkLabelBlock())], required=False))], max_num=1, required=False))], label='Stat', required=True), required=True))]))], blank=True)),
                ('hero_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.SiteImage', verbose_name='Background image')),
                ('thumbnail', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.SiteImage')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtailcache.cache.WagtailCacheMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('hero_headline', models.CharField(blank=True, max_length=255, null=True, verbose_name='Headline')),
                ('hero_body', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Body text')),
                ('blurb', models.TextField(blank=True, null=True)),
                ('display_date', models.DateField(blank=True, help_text='If blank, this will be set to the date the page was first published', null=True)),
                ('body', wagtail.core.fields.StreamField([('stats', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(help_text='Title text', required=False)), ('body', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'underline', 'ol', 'ul', 'small', 'link', 'document-link'], help_text='Body text', required=False)), ('background_image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text_align', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'Left'), ('centred', 'Center'), ('right', 'Right')], label='Align', required=False)), ('objects', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('stat_text', wagtail.core.blocks.CharBlock(help_text='Text version of this stat', required=True)), ('stat_image', wagtail.images.blocks.ImageChooserBlock(help_text='Image version of this stat', required=False)), ('description', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('cta', wagtail.core.blocks.StreamBlock([('page', wagtail.core.blocks.StructBlock([('link_page', wagtail.core.blocks.PageChooserBlock(label='Linked Page', required=True)), ('link_label', modules.core.blocks.mixins.LinkLabelBlock(help_text='If blank, will use page title'))], required=False)), ('document', wagtail.core.blocks.StructBlock([('link_document', wagtail.documents.blocks.DocumentChooserBlock(label='Linked Document', required=True)), ('link_label', modules.core.blocks.mixins.LinkLabelBlock())], required=False)), ('url', wagtail.core.blocks.StructBlock([('link_url', wagtail.core.blocks.CharBlock(label='URL', required=True)), ('link_label', modules.core.blocks.mixins.LinkLabelBlock())], required=False))], max_num=1, required=False))], label='Stat', required=True), required=True))]))], blank=True)),
                ('hero_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.SiteImage', verbose_name='Background image')),
                ('thumbnail', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.SiteImage')),
            ],
            options={
                'verbose_name': 'Home page',
            },
            bases=(wagtailcache.cache.WagtailCacheMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='FooterNavItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('text', models.CharField(blank=True, help_text='Link text', max_length=32, null=True)),
                ('link_url', models.CharField(blank=True, help_text='Link to an external URL', max_length=255, null=True)),
                ('link_document', models.ForeignKey(blank=True, help_text='Link to a document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.SiteDocument')),
                ('link_page', models.ForeignKey(blank=True, help_text='Link to a page', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page')),
                ('nav_menu', modelcluster.fields.ParentalKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nav_items', to='core.FooterNavigationMenu')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DocumentDownload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referrer_path', models.TextField(blank=True, null=True)),
                ('downloaded_at', models.DateTimeField(auto_now_add=True)),
                ('document', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_downloads', to='core.SiteDocument')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='document_downloads', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CookiesPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('hero_headline', models.CharField(blank=True, max_length=255, null=True, verbose_name='Headline')),
                ('hero_body', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Body text')),
                ('blurb', models.TextField(blank=True, null=True)),
                ('display_date', models.DateField(blank=True, help_text='If blank, this will be set to the date the page was first published', null=True)),
                ('page_intro', wagtail.core.fields.RichTextField()),
                ('analytics_intro', wagtail.core.fields.RichTextField()),
                ('third_party_intro', wagtail.core.fields.RichTextField()),
                ('hero_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.SiteImage', verbose_name='Background image')),
                ('thumbnail', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.SiteImage')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtailcache.cache.WagtailCacheMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='ArticlePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('hero_headline', models.CharField(blank=True, max_length=255, null=True, verbose_name='Headline')),
                ('hero_body', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Body text')),
                ('blurb', models.TextField(blank=True, null=True)),
                ('display_date', models.DateField(blank=True, help_text='If blank, this will be set to the date the page was first published', null=True)),
                ('body', wagtail.core.fields.StreamField([('rich_text', wagtail.core.blocks.RichTextBlock(features=['h2', 'h3', 'h4', 'h5', 'h6', 'bold', 'italic', 'underline', 'small', 'ol', 'ul', 'link', 'document-link'])), ('image', wagtail.images.blocks.ImageChooserBlock()), ('article_image', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(required=True)), ('caption', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'document-link'], required=False))])), ('embed', modules.core.blocks.stream.EmbedBlock()), ('html', wagtail.core.blocks.RawHTMLBlock())], blank=True)),
                ('additional_content', wagtail.core.fields.StreamField([('stats', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(help_text='Title text', required=False)), ('body', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic', 'underline', 'ol', 'ul', 'small', 'link', 'document-link'], help_text='Body text', required=False)), ('background_image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text_align', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'Left'), ('centred', 'Center'), ('right', 'Right')], label='Align', required=False)), ('objects', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('stat_text', wagtail.core.blocks.CharBlock(help_text='Text version of this stat', required=True)), ('stat_image', wagtail.images.blocks.ImageChooserBlock(help_text='Image version of this stat', required=False)), ('description', wagtail.core.blocks.CharBlock(max_length=255, required=False)), ('cta', wagtail.core.blocks.StreamBlock([('page', wagtail.core.blocks.StructBlock([('link_page', wagtail.core.blocks.PageChooserBlock(label='Linked Page', required=True)), ('link_label', modules.core.blocks.mixins.LinkLabelBlock(help_text='If blank, will use page title'))], required=False)), ('document', wagtail.core.blocks.StructBlock([('link_document', wagtail.documents.blocks.DocumentChooserBlock(label='Linked Document', required=True)), ('link_label', modules.core.blocks.mixins.LinkLabelBlock())], required=False)), ('url', wagtail.core.blocks.StructBlock([('link_url', wagtail.core.blocks.CharBlock(label='URL', required=True)), ('link_label', modules.core.blocks.mixins.LinkLabelBlock())], required=False))], max_num=1, required=False))], label='Stat', required=True), required=True))]))], blank=True)),
                ('show_share_options', models.BooleanField(blank=True, default=True)),
                ('hero_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.SiteImage', verbose_name='Background image')),
                ('thumbnail', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.SiteImage')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtailcache.cache.WagtailCacheMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='AnalyticsSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analytics_property_id', models.CharField(blank=True, help_text='Analytics property ID (starting UA-...)', max_length=32, null=True)),
                ('tag_manager_property_id', models.CharField(blank=True, help_text='Tag Manager property ID (starting GTM...)', max_length=32, null=True)),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'verbose_name': 'Analytics settings',
            },
        ),
        migrations.CreateModel(
            name='SiteImageRendition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_spec', models.CharField(db_index=True, max_length=255)),
                ('file', models.ImageField(height_field='height', upload_to=wagtail.images.models.get_rendition_upload_to, width_field='width')),
                ('width', models.IntegerField(editable=False)),
                ('height', models.IntegerField(editable=False)),
                ('focal_point_key', models.CharField(blank=True, default='', editable=False, max_length=16)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renditions', to='core.SiteImage')),
            ],
            options={
                'unique_together': {('image', 'filter_spec', 'focal_point_key')},
            },
        ),
    ]
